x=2
x
cube <- function(x , n) {
X^3
}
cube(3)
cube <- function(x , n) {
x^3
}
cube(3)
x < 1:10
if(x<5) {
x <- 0
}
x <- 1:10
if(x<5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
z
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
y <- 0
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
y <- 3L
y
l
L
f
n <- 3y
y
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector() #initialize
a$set(c(1,2,3,4,5,6,7)) #set the vector
a$get #get the vector
cachemean(a)
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <-makeCacheMatrix()
a
z = matrix(1:4,2,2)
z
a$set(z)
a$get()
cacheSolve(a)
mean(z)
slove(z)
slov(z)
solve(z)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {   ## this function get the matrix and save in static varibale and initialize m to NULL
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(matrix) m <<- matrix
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
a <-makeCacheMatrix()
a
z
a$set(z)
a$get()
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {   ## this function get the matrix and save in static varibale and initialize m to NULL
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(matrix) m <<- matrix
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## The following function calculates the inverse matrix of the special "matrix" created with the above function.
## However, it first checks to see if the inverse has already been calculated.
## If so, it gets the inverse from the cache and skips the computation.
## Otherwise, it calculates the inverse matrix and sets the value of the inverse in the cache via the setsolve function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
a$get
a$get()
cacheSolve(a)
cacheSolve(a)
setwd("C:/Users/ronen.tanami/ProgrammingAssignment2/ProgrammingAssignment2")
